{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/github-repos/github-repos.component.html","webpack:///./src/app/github-repos/github-repos.component.ts","webpack:///./src/app/github-service.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","<app-github-repos></app-github-repos>\n<router-outlet></router-outlet>\n","import { Component } from '@angular/core';\nimport { SwUpdate } from '@angular/service-worker';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  constructor(updates: SwUpdate) {\n    updates.available.subscribe(event => {\n      updates.activateUpdate().then(() => {\n        document.location.reload();\n      });\n    });\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { GithubServiceService } from './github-service.service';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { GithubReposComponent } from './github-repos/github-repos.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GithubReposComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production }),\n    BrowserAnimationsModule,\n    MatCardModule,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule,\n    MatToolbarModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n  ],\n  providers: [\n    GithubServiceService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div class=\"main-container\">\n  <mat-toolbar class=\"searchcontrols\">\n    <mat-toolbar-row>\n      <h1 i18n=\"@@topWelcome\">Github User Search</h1>\n    </mat-toolbar-row>\n    <mat-toolbar-row>\n      <mat-form-field class=\"full-width\">\n        <input\n          matInput\n          type=\"text\"\n          placeholder=\"GitHub User\"\n          [(ngModel)]=\"searchText\"\n          value=\"{{ searchText }}\"\n        />\n        <button\n          mat-icon-button\n          aria-label=\"Clear\"\n          (click)=\"onSearchButtonClick()\"\n        >\n          <mat-icon>search</mat-icon>\n        </button>\n        <span>Enter a GitHub username</span>\n      </mat-form-field>\n    </mat-toolbar-row>\n  </mat-toolbar>\n  <div class=\"repo-container\">\n    <div class=\"left\"></div>\n    <div>\n      <mat-card class=\"repo-card\" *ngFor=\"let repo of repos\">\n        <mat-card-header>\n          <mat-card-title>{{ repo.name }}</mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"repo-desc\">\n          <p>{{ repo.description }}</p>\n          <p>{{ repo.html_url }}</p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n    <div class=\"right\"></div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { GithubServiceService } from '../github-service.service';\n\ninterface GitHubRepo {\n  html_url: string;\n  name: string;\n  language: string;\n  description: string;\n}\n\n\n@Component({\n  selector: 'app-github-repos',\n  templateUrl: './github-repos.component.html',\n  styleUrls: ['./github-repos.component.scss']\n})\nexport class GithubReposComponent implements OnInit {\n  repos: GitHubRepo[];\n  public searchText: string;\n\n  constructor(private githubService: GithubServiceService) { }\n\n  ngOnInit() {\n    this.githubService.getRepos('dfonjga')\n    .subscribe((data: GitHubRepo[]) => {\n      this.repos = data;\n    });\n  }\n\n  onSearchButtonClick() {\n    this.githubService.getRepos(this.searchText)\n    .subscribe((data: GitHubRepo[]) => {\n      this.repos = data;\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GithubServiceService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  public getRepos(username: string) {\n    return this.http.get(`https://api.github.com/users/${username}/repos`);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}